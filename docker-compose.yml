services:
  # PostgreSQL Database
  database:
    image: postgres:latest
    container_name: ravenai-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: aftertalk
      POSTGRES_USER: aftertalk_user
      POSTGRES_PASSWORD: aftertalk_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5433:5432"
    networks:
      - aftertalk-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aftertalk_user -d aftertalk"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: ravenai-backend
    restart: unless-stopped
    volumes:
      # Mount Google OAuth credentials file
      - ./backend/client_secret_1048775706645-jka3a5o69ltecsb69ogv0usjev21npvk.apps.googleusercontent.com.json:/app/client_secret_1048775706645-jka3a5o69ltecsb69ogv0usjev21npvk.apps.googleusercontent.com.json:ro
    environment:
      # Database Configuration
      DATABASE_URL: postgresql://aftertalk_user:aftertalk_password@database:5432/aftertalk
      
      # Security
      SECRET_KEY: your-super-secret-key-change-this-in-production-docker
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      
      # API Keys (required for functionality)
      # GEMINI_API_KEY: your-gemini-api-key  # Optional alternative to OpenAI
      VEXA_ADMIN_KEY: ${VEXA_ADMIN_KEY}  # Required for meeting transcription
      OPENAI_API_KEY: ${OPENAI_API_KEY}  # Required for AI summaries
      
      # CORS Origins - Updated for Docker network
      CORS_ORIGINS: '["http://localhost:3000", "http://localhost:5173", "http://127.0.0.1:3000", "http://127.0.0.1:5173"]'
      
      # Email Configuration (optional)
      # SMTP_SERVER: smtp.gmail.com
      # SMTP_PORT: 587
      # SMTP_USERNAME: your-email@gmail.com
      # SMTP_PASSWORD: your-app-password
    ports:
      - "8000:8000"
    networks:
      - aftertalk-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: ravenai-frontend
    restart: unless-stopped
    environment:
      # API Configuration - Use localhost since browser makes the calls from host
      VITE_API_BASE_URL: http://localhost:8000
      VITE_APP_NAME: RavenAI
      VITE_APP_VERSION: 1.0.0
      # For development mode
      NODE_ENV: development
    ports:
              - "3000:3000"
    networks:
      - ravenai-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
    name: ravenai_postgres_data

# Custom network for service communication
networks:
  aftertalk-network:
    driver: bridge
    name: ravenai-network 